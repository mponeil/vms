# For a complete reference, please see the online documentation at
# https://docs.vagrantup.com.

require 'yaml'
require 'json'
VAGRANT_VERSION = "2"

# Load config file in
if File.exists? "config.yaml" then
  settings = YAML::load(File.read("config.yaml"))
elsif File.exists? "config.json" then
  settings = JSON.parse(File.read("config.json"))
else
  abort "No config file found"
end

Vagrant.configure(VAGRANT_VERSION) do |config|
  # Set the vagrant provider, defaults to VirtualBox
  ENV['VAGRANT_DEFAULT_PROVIDER'] = settings["provider"] ||= "virtualbox"
  
  # Squelch TTY errors in the console
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = settings["box"] ||= "hashicorp/precise64"
  config.vm.hostname = settings["hostname"] ||= nil

  # Create a private network using a specific IP.
  config.vm.network :private_network, ip: settings["ip"] ||= "192.168.10.10"

  # Additional networks
  if (settings.has_key?("networks"))
    settings["networks"].each do |network|
      config.vm.network network["type"], ip: network["ip"], bridge: network["bridge"] ||= nil
    end
  end

  # Configure Virtualbox
  config.vm.provider "virtualbox" do |vb|
    vb.name = settings["name"] ||= "default"
    vb.customize ["modifyvm", :id, "--memory", settings["memory"] ||= "2048"]
    vb.customize ["modifyvm", :id, "--cpus", settings["cpus"] ||= "1"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--ostype", "Ubuntu_64"]
  end

  # Simplify port naming scheme and apply
  if (settings.has_key?("ports"))
    settings["ports"].each do |port|
      port["guest"] ||= port["to"]
      port["host"] ||= port["send"]
      port["protocol"] ||= "tcp"
    end
  else
    settings["ports"] = []
  end

  if settings.has_key?("ports")
    settings["ports"].each do |port|
      config.vm.network "forwarded_port", guest: port["guest"], host: port["host"], protocol: port["protocol"], auto_correct: true
    end
  end

  # Authorize the provided key for SSH'ing to the guest box
  if settings.include? 'authorize'
    config.vm.provision "shell" do |s|
      s.inline = "echo $1 | grep -xq \"$1\" /home/vagrant/.ssh/authorized_keys || echo $1 | tee -a /home/vagrant/.ssh/authorized_keys"
      s.args = [File.read(File.expand_path(settings["authorize"]))]
    end
  end

  # Copy the specified private keys to the guest box
  if settings.include? 'keys'
    settings["keys"].each do |key|
      config.vm.provision "shell" do |s|
        s.privileged = false
        s.inline = "echo \"$1\" > /home/vagrant/.ssh/$2 && chmod 600 /home/vagrant/.ssh/$2"
        s.args = [File.read(File.expand_path(key)), key.split('/').last]
      end
    end
  end

  # Connect all of the configured shared folders
  if settings.include? 'folders'
    settings["folders"].each do |folder|
      mount_opts = []
      if (folder["type"] == "nfs")
        mount_opts = folder["mount_opts"] ? folder["mount_opts"] : ['actimeo=1']
      end
      config.vm.synced_folder folder["map"], folder["to"], type: folder["type"] ||= nil, mount_options: mount_opts
    end
  end

  config.vm.provision "shell", inline: <<-SHELL
    echo "+ Provisioning Ruby on Rails development server"
    /usr/sbin/update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8
    apt-get -qq update
    echo "+ Installing Git"
    apt-get -qq -y install git
    echo "+ Installing cURL"
    apt-get -qq -y install curl
    echo "+ Installing PostgreSQL"
    apt-get -qq -y install postgresql libpq-dev
    echo "+ Setting up default database and user"
    mkdir -p /usr/local/pgsql/data
    chown postgres:postgres /usr/local/pgsql/data
    sudo su postgres -c "/usr/lib/postgresql/9.1/bin/initdb -D /usr/local/pgsql/data"
    sudo su postgres -c "createuser -s -d -r vagrant"
    echo "+ Installing Ruby Version Manager"
    curl -sSL https://get.rvm.io | bash
    source /etc/profile.d/rvm.sh
    rvm requirements >/dev/null 2>&1
    echo "+ Installing Ruby v1.9.3"
    rvm install 1.9.3 >/dev/null 2>&1
    echo "+ Installing Ruby v2.3 (as default)"
    rvm install 2.3 >/dev/null 2>&1
    rvm use 2.3 --default
    echo "+ Installing NodeJS"
    apt-get -qq -y install nodejs
    echo "+ Installing Bundler"
    gem install bundler
    echo "+ Installing latest Ruby on Rails"
    gem install rails
    echo "+ Completed provisioning of Ruby on Rails development environment!"
  SHELL
end
